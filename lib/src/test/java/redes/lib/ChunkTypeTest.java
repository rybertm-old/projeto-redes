/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package redes.lib;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import java.security.InvalidParameterException;
import java.util.Arrays;
import java.util.List;

import org.junit.Test;

public class ChunkTypeTest {
    @Test
    public void testChunkTypeFromBytes() {
        Byte[] bytes = { 82, 117, 83, 116 };
        List<Byte> expected = Arrays.asList(bytes);
        var actual = ChunkType.fromBytes(expected);
        assertEquals(expected, actual.getChunk());
    }

    @Test
    public void testChunkTypeFromString() {
        Byte[] bytes = { 82, 117, 83, 116 };
        List<Byte> exp = Arrays.asList(bytes);
        var expected = ChunkType.fromBytes(exp);
        var actual = ChunkType.fromString("RuSt");
        assertEquals(expected, actual);
    }

    @Test
    public void testChunkTypeIsCritical() {
        var chunk = ChunkType.fromString("RuSt");
        assertTrue(chunk.isCritical());
    }

    @Test
    public void testChunkTypeIsNotCritical() {
        var chunk = ChunkType.fromString("ruSt");
        assertFalse(chunk.isCritical());
    }

    @Test
    public void testChunkTypeIsPublic() {
        var chunk = ChunkType.fromString("RUSt");
        assertTrue(chunk.isPublic());
    }

    @Test
    public void testChunkTypeIsNotPublic() {
        var chunk = ChunkType.fromString("RuSt");
        assertFalse(chunk.isPublic());
    }

    @Test
    public void testChunkTypeIsReservedBitValid() {
        var chunk = ChunkType.fromString("RuSt");
        assertTrue(chunk.isReservedBitValid());
    }

    @Test(expected = InvalidParameterException.class)
    public void testChunkTypeIsReservedBitInvalid() {
        ChunkType.fromString("Rust");
    }

    @Test
    public void testChunkTypeIsSafeToCopy() {
        var chunk = ChunkType.fromString("RuSt");
        assertTrue(chunk.isSafeToCopy());
    }

    @Test
    public void testChunkTypeIsNotSafeToCopy() {
        var chunk = ChunkType.fromString("RuST");
        assertFalse(chunk.isSafeToCopy());
    }

    @Test
    public void testChunkTypeIsValid() {
        var chunk = ChunkType.fromString("RuSt");
        assertTrue(chunk.isValid());
    }

    @Test(expected = InvalidParameterException.class)
    public void testChunkTypeIsInvalid() {
        ChunkType.fromString("Rust");
    }

    @Test
    public void testChunkTypeToString() {
        var chunk = ChunkType.fromString("RuSt");
        assertEquals("RuSt", chunk.toString());
    }
}
